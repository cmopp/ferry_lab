schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
columns and relationships of "items"
"""
type items {
  id: uuid!
  item_name: String!
}

"""
Boolean expression to filter rows from the table "items". All fields are combined with a logical 'AND'.
"""
input items_bool_exp {
  _and: [items_bool_exp!]
  _not: items_bool_exp
  _or: [items_bool_exp!]
  id: uuid_comparison_exp
  item_name: String_comparison_exp
}

"""
unique or primary key constraints on table "items"
"""
enum items_constraint {
  """unique or primary key constraint"""
  items_pkey
}

"""
input type for inserting data into table "items"
"""
input items_insert_input {
  id: uuid
  item_name: String
}

"""
response of any mutation on the table "items"
"""
type items_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [items!]!
}

"""
on conflict condition type for table "items"
"""
input items_on_conflict {
  constraint: items_constraint!
  update_columns: [items_update_column!]! = []
  where: items_bool_exp
}

"""Ordering options when selecting data from "items"."""
input items_order_by {
  id: order_by
  item_name: order_by
}

"""primary key columns input for table: items"""
input items_pk_columns_input {
  id: uuid!
}

"""
select columns of table "items"
"""
enum items_select_column {
  """column name"""
  id

  """column name"""
  item_name
}

"""
input type for updating data in table "items"
"""
input items_set_input {
  id: uuid
  item_name: String
}

"""
update columns of table "items"
"""
enum items_update_column {
  """column name"""
  id

  """column name"""
  item_name
}

"""mutation root"""
type mutation_root {
  """
  insert data into the table: "items"
  """
  insert_items(
    """the rows to be inserted"""
    objects: [items_insert_input!]!

    """on conflict condition"""
    on_conflict: items_on_conflict
  ): items_mutation_response

  """
  insert a single row into the table: "items"
  """
  insert_items_one(
    """the row to be inserted"""
    object: items_insert_input!

    """on conflict condition"""
    on_conflict: items_on_conflict
  ): items

  """
  insert data into the table: "orders"
  """
  insert_orders(
    """the rows to be inserted"""
    objects: [orders_insert_input!]!

    """on conflict condition"""
    on_conflict: orders_on_conflict
  ): orders_mutation_response

  """
  insert a single row into the table: "orders"
  """
  insert_orders_one(
    """the row to be inserted"""
    object: orders_insert_input!

    """on conflict condition"""
    on_conflict: orders_on_conflict
  ): orders

  """
  update data of the table: "items"
  """
  update_items(
    """sets the columns of the filtered rows to the given values"""
    _set: items_set_input

    """filter the rows which have to be updated"""
    where: items_bool_exp!
  ): items_mutation_response

  """
  update single row of the table: "items"
  """
  update_items_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: items_set_input
    pk_columns: items_pk_columns_input!
  ): items

  """
  update data of the table: "orders"
  """
  update_orders(
    """increments the numeric columns with given value of the filtered values"""
    _inc: orders_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: orders_set_input

    """filter the rows which have to be updated"""
    where: orders_bool_exp!
  ): orders_mutation_response

  """
  update single row of the table: "orders"
  """
  update_orders_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: orders_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: orders_set_input
    pk_columns: orders_pk_columns_input!
  ): orders
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "orders"
"""
type orders {
  id: uuid!
  item: uuid!
  quantity: Int!
}

"""
Boolean expression to filter rows from the table "orders". All fields are combined with a logical 'AND'.
"""
input orders_bool_exp {
  _and: [orders_bool_exp!]
  _not: orders_bool_exp
  _or: [orders_bool_exp!]
  id: uuid_comparison_exp
  item: uuid_comparison_exp
  quantity: Int_comparison_exp
}

"""
unique or primary key constraints on table "orders"
"""
enum orders_constraint {
  """unique or primary key constraint"""
  ferry_pkey
}

"""
input type for incrementing numeric columns in table "orders"
"""
input orders_inc_input {
  quantity: Int
}

"""
input type for inserting data into table "orders"
"""
input orders_insert_input {
  id: uuid
  item: uuid
  quantity: Int
}

"""
response of any mutation on the table "orders"
"""
type orders_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [orders!]!
}

"""
on conflict condition type for table "orders"
"""
input orders_on_conflict {
  constraint: orders_constraint!
  update_columns: [orders_update_column!]! = []
  where: orders_bool_exp
}

"""Ordering options when selecting data from "orders"."""
input orders_order_by {
  id: order_by
  item: order_by
  quantity: order_by
}

"""primary key columns input for table: orders"""
input orders_pk_columns_input {
  id: uuid!
}

"""
select columns of table "orders"
"""
enum orders_select_column {
  """column name"""
  id

  """column name"""
  item

  """column name"""
  quantity
}

"""
input type for updating data in table "orders"
"""
input orders_set_input {
  id: uuid
  item: uuid
  quantity: Int
}

"""
update columns of table "orders"
"""
enum orders_update_column {
  """column name"""
  id

  """column name"""
  item

  """column name"""
  quantity
}

type query_root {
  """
  fetch data from the table: "items"
  """
  items(
    """distinct select on columns"""
    distinct_on: [items_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [items_order_by!]

    """filter the rows returned"""
    where: items_bool_exp
  ): [items!]!

  """fetch data from the table: "items" using primary key columns"""
  items_by_pk(id: uuid!): items

  """
  fetch data from the table: "orders"
  """
  orders(
    """distinct select on columns"""
    distinct_on: [orders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [orders_order_by!]

    """filter the rows returned"""
    where: orders_bool_exp
  ): [orders!]!

  """fetch data from the table: "orders" using primary key columns"""
  orders_by_pk(id: uuid!): orders
}

type subscription_root {
  """
  fetch data from the table: "items"
  """
  items(
    """distinct select on columns"""
    distinct_on: [items_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [items_order_by!]

    """filter the rows returned"""
    where: items_bool_exp
  ): [items!]!

  """fetch data from the table: "items" using primary key columns"""
  items_by_pk(id: uuid!): items

  """
  fetch data from the table: "orders"
  """
  orders(
    """distinct select on columns"""
    distinct_on: [orders_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [orders_order_by!]

    """filter the rows returned"""
    where: orders_bool_exp
  ): [orders!]!

  """fetch data from the table: "orders" using primary key columns"""
  orders_by_pk(id: uuid!): orders
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

